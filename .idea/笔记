1. 创建Maven项目
2. 配置pom
3. 创建包
4. 创建入口程序

创建包：
cmd：命令行交互式实现的代码  存放客户端代码
ui：跟网页交互的代码
core：
    search:检索模块
    index：索引模块
    monitor：监控
    dao:数据访问对象  jdbc编程代码
     interceptor：拦截器
     common：公共
     model：模型
config：
---------------------------------------------------------------------------------
读数据：
    1.通过控制台交互式输入
    2.读文件
    3.arguments 命令行参数
    4.数据库

     ---------  数据库  -------------
     1.本地系统中的文件或文件夹 -> Java File -> Java Thing -> 数据库中记录Table
       数据库创建，数据库表的设计
     2.具体设计：

技术：
    1.javaSE
    2.DataBase
    3.使用JDBC连接数据库
    4.lombok库
    5.多线程
    6.文件监控

检索：
    1.数据库的初始化工作
    2.数据库的访问工作（使用DataSource)
    3.实现检索业务（查询）= > search conditon => Dao  （1-10)
索引：
    数据库的初始化工作
    数据库的访问工作
    4.实现索引业务（插入）
    5.如果遍历文件系统中的所有文件，并且将文件对象转换成Thing对象，调用数据库访问的插入操作。（11-12）
        1.遍历出来所有文件
        2.File转为Thing
        3.将Thing放入数据库
        4.打印

为什么有检索拦截器？
    当在系统中创建一个文件之后，会将其保存在数据库，再去search可以查得到。
    当在系统把这个文件删除之后，仍然可以Search到，因为数据库中这个文件依然存在。
    但是文件系统中没有这个文件。

    拦截器在这里的作用就是：检索结果之后将其拦截一下。判断这个文件不再文件系统里面，
        应该回到数据库将其删除。所以用ThingClearInterceptor类实现。



----------------------------  文件操作步骤以及文件内容  ----------------------------------
-- core - model ...
1.FileType :文件枚举类型
2.condition：检索条件的模型类型 (文件名，文件类型，数量，是否升序）
3.Thing :（名称（不含路径)，路径，深度，类型）
    4.database.sql 创建数据库  设计thing表的设计
    5.JDBC -> 数据库的驱动，数据库连接池  //  数据库相关依赖  暂时使用MySQL,JDBC编程屏蔽了数据库的差异，后续切换到H2
-- core - dao
6.DataSourceFactory :数据源的工厂 关于单例
9.FileIndexDao:数据库访问的对象  插入（thing) 删除(thing) 查询(condition)
-- core - Search
7.ThingSearch:文件检索业务  根据condition条件检索数据   List<Thing> search(Condition condition);
8.ThingSearchImpl:

--- 如何实现业务 --
  -- dao- impl
10.FileIndexDaoImpl:FileIndexDao的实现类
     - 将文件转化成thing，转换之后的thing 插入到数据库

-- index
11. FileScan接口
17. FileScanImpl:FileScan接口的实现类

-- core - interceptor  拦截器
13.FileInterceptor:文件拦截器，处理指定文件
14.FilePrintInterceptor: FileInterceptor实现类  文件打印 -- 打印输出拦截器
19.EverthingManager:统一调度器
    统一调度器：
    - 索引
        后台线程执行
    - 检索
        立即执行返回结果
    配置：
        1.索引目录：包含的目录  排除的目录
        2.通过参数设置是否开启索引线程
        3.查询是按照depth的升序还是降序
        4.查询的结果数量是多少 最大返回的数量

-- config  该包主要归档和程序配置交互相关的程序
20.EverythingConfig:配置信息
21.HandlerPath:处理的目录


如何把文件对象转换为Thing对象？
-- common
15.FileConvertThing:文件对象转换Thing对象的辅助类
16.FileIndexInterceptor: 将File转换为Thing然后写入数据库 --- 索引文件到数据库的拦截器
17.ThingClearInterceptor：检索结果Thing的拦截器。

-- search
18.ThingSearchImpl:  search():如果本地文件系统将文件删除，数据库中仍然存储到索引信息，
       此时如果查询结果存在已经在文件系统中删除的文件，那么需要在数据库中清除掉该文件的索引信息。

19.配置，索引模块，检索模块，拦截器模块组合调度
    EverythingManager

 -- cmd
20.EverythingG1CmdApplication

22.将MySQL数据库改成H2数据库








第一步：在maven的配置中引入 Lombok 库
第二步：在IDEA中安装Lombok Plugin 插件
第三步：在IDEA中启用注解处理器




------------------------    测试     ---------------------------------------
1.测试Thing 使用单元测试 测试是否能够获取到存在的文件类型 测试添加的lombok是否成功
2.DataSourceFactory  单测 测试是否与H2数据库建立连接
3.对文件的插入，删除，查找的语法以及业务分别进行单元测试
4.单元测试文件的递归，能否找到目录文件夹文件
5.单元测试计算文件深度
6.利用单元测试 FileScan 的打印输出拦截器和索引文件到数据库的拦截器
7.为了使得项目配置信息准正确，使用 单元测试  测试代码的准确性，如检索最大返回结果数，
    是否开启索引以及检索时深度的排序规则


    1.基本功能完成
    2.基本功能的测试
        2.1 help quit
        2.2 索引建立
            1.name长度不够
        2.3 根据名称查询
            BUG
        2.4 根据名称+类型查询
            BUG
        2.5 检索结果的数量
            BUG
        2.6 检索结果的排序策略
            1.无排序

思考一个问题：
    - MySQL写入数据比较慢
        杀鸡用牛刀。这是一个很小的程序，却用了很大的MySQL服务器，只是做了一些数据的写入。
        选择H2数据库的理由：
        1.H2是嵌入式数据库，很好的编程与结合，便于程序的发布。
        2.如果是MySQL，就使用了更加复杂的数据库管理系统，每次在写数据库的时候，网络开销比较大，
            所以写入比较慢。如果批量写入数据的话，就会增加编码的复杂度，因此选择H2
        3.H2数据库的优势：
            Java语言开发。
            1.非常快，所以特别搜索
            2.开源
            3.支持三种模式：嵌入式模式（可以嵌入程序），可以把它当作服务器启动起来，然后客户端去连接，
            4.可以当作一个内存数据库，
            5.非常轻量级，
            Java语言要用一些轻量级，快速的，开源的并且还可以嵌入到程序里面的一个数据库，H2非常合适。
            轻量但没有缺少功能，多版本并发



    - 代码管理：
        源代码版本管理
        SVN Git
        GitHub

